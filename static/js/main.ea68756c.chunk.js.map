{"version":3,"sources":["types/SelectValues.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectValue","TotoActions","todo","type","payload","currentTodoReducer","state","action","initialState","status","query","filterActions","filterReducer","actions","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","useMemo","todosFromServer","search","queryLower","toLowerCase","trim","title","includes","todosFilter","Completed","completed","Active","filterForStatusTodo","length","className","map","classNames","id","name","onClick","setCurrentTodo","TodoFilter","onChange","e","setToStatus","preventDefault","target","value","Object","entries","key","placeholder","setToQuery","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoader","setIsLoader","email","phone","user","setUser","useEffect","userId","finally","href","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea68756c.chunk.js","sourcesContent":["export enum SelectValue {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport const TotoActions = { setTodo, removeTodo };\n\nexport default currentTodoReducer;\n","type SetStatus = {\n  type: 'filter/SET_STATUS',\n  payload: string,\n};\n\ntype SetQuery = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype Clear = {\n  type: 'filter/CLEAR',\n};\n\nconst setStatus = (status: string): SetStatus => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst clear = (): Clear => ({\n  type: 'filter/CLEAR',\n});\n\ntype State = {\n  status: string,\n  query: string,\n};\n\nconst initialState: State = { status: 'all', query: '' };\n\ntype Action = SetStatus | SetQuery | Clear;\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport const filterActions = {\n  setStatus,\n  setQuery,\n  remove: clear,\n};\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype Action = SetTodosAction;\ntype State = Todo[];\n\nconst todosReducer = (state: State = [], action: Action) => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setTodos,\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { TotoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { SelectValue } from '../../types/SelectValues';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const setCurrentTodo = (todo: Todo) => dispatch(TotoActions.setTodo(todo));\n\n  const filterForStatusTodo = () => {\n    switch (status) {\n      case SelectValue.Completed:\n        return todos.filter((todo) => todo.completed);\n      case SelectValue.Active:\n        return todos.filter((todo) => !todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  const todosFilter = (todosFromServer: Todo[], search: string) => {\n    const queryLower = search.toLowerCase().trim();\n\n    if (queryLower === '') {\n      return todosFromServer;\n    }\n\n    return todosFromServer.filter((todo:Todo) => todo.title\n      .toLowerCase()\n      .includes(queryLower));\n  };\n\n  const visibleTodos = useMemo(() => {\n    return todosFilter(filterForStatusTodo(), query);\n  }, [todos, query, status]);\n\n  return (\n    <>\n      {query && !visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {\n              visibleTodos.map((todo) => {\n                return (\n                  <tr\n                    key={todo.id}\n                    data-cy=\"todo\"\n                    className={classNames({\n                      'has-background-info-light': currentTodo?.id === todo.id,\n                    })}\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n\n                    {todo.completed ? (\n                      <td className=\"is-vcentered\">\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      </td>\n                    ) : (\n                      <td className=\"is-vcentered\" />\n                    )}\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames({\n                        'has-text-success': todo.completed,\n                        'has-text-danger': !todo.completed,\n                      })}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        name=\"selectButton\"\n                        onClick={() => setCurrentTodo(todo)}\n                        type=\"button\"\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far', {\n                            'fa-eye-slash': currentTodo?.id === todo.id,\n                            'fa-eye': currentTodo?.id !== todo.id,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { filterActions } from '../../features/filter';\nimport { SelectValue } from '../../types/SelectValues';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const setQuery = (setToQuery: string) => dispatch(\n    filterActions.setQuery(setToQuery),\n  );\n  const setStatus = (setToStatus: string) => dispatch(\n    filterActions.setStatus(setToStatus),\n  );\n  const clearQuery = () => dispatch(filterActions.remove());\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleChangeQuery = (e:ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    setQuery(e.target.value);\n  };\n\n  const handleChangeSelect = (e:ChangeEvent<HTMLSelectElement>) => {\n    e.preventDefault();\n\n    setStatus(e.target.value as SelectValue);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChangeSelect}\n            value={status}\n          >\n            {Object.entries(SelectValue).map(([key, value]) => (\n              <option\n                key={value}\n                value={value}\n              >\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          name=\"search\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              name=\"clearButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            >\n              <></>\n            </button>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { TotoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User>({\n    email: '',\n    id: 0,\n    name: '',\n    phone: '',\n  });\n\n  useEffect(() => {\n    setIsLoader(true);\n\n    if (!currentTodo) {\n      return;\n    }\n\n    getUser(currentTodo.userId)\n      .then((res) => {\n        setUser(res);\n      })\n      .finally(() => setIsLoader(false));\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoader ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"Close button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(TotoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className={classNames({\n                  'has-text-success': currentTodo?.completed,\n                })}\n                >\n                  Done\n                </strong>\n              ) : (\n                <strong className={classNames({\n                  'has-text-danger': !currentTodo?.completed,\n                })}\n                >\n                  Planned\n                </strong>\n              )}\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoader(true);\n    getTodos()\n      .then((res) => {\n        dispatch(actions.setTodos(res));\n      })\n      .finally(() => {\n        setIsLoader(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoader ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}